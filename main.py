import logging
from telegram.ext import Updater, MessageHandler, Filters
from telegram.ext import CommandHandler
from telegram import ReplyKeyboardMarkup
from telegram import ReplyKeyboardRemove
from telegram.ext import ConversationHandler
import sqlite3
import pandas as pd
import dataframe_image as dfi
import telebot
import schedule, time
import datetime

# –ó–∞–ø—É—Å–∫–∞–µ–º –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.DEBUG
)

# –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π –Ω–∞ –Ω–µ–¥–µ–ª—é
SCHEDULE = [
    ['–∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫', '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞', '—Ä–æ–¥–Ω–æ–π —è–∑—ã–∫', '—Ñ–∏–∑–∏–∫–∞'],
    ['–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞', '–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞', '—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫', '–∏—Å—Ç–æ—Ä–∏—è'],
    ['–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞', '–æ–±–∂', '—Ñ–∏–∑–∫—É–ª—å—Ç—É—Ä–∞'],
    ['–∏—Å—Ç–æ—Ä–∏—è', '—Ñ–∏–∑–∏–∫–∞', '–ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞'],
    ['–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞', '–∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫'],
    ['–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞', '—Ö–∏–º–∏—è'],
]

logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω
TOKEN = '5066165607:AAEU9ovd5Zs0En3bOmz5znA4KU3QytLL6Ww'

# –°–º–∞–π–ª–∏–∫–∏
SMILE = ['üß†', 'üí¨', 'üëª', 'ü§ó', 'ü•±',
         'üí§', 'ü•¥', '‚ò†', '‚ù§', 'ü§•', '‚õπÔ∏è']

bot = telebot.TeleBot(TOKEN)


reply_keyboard = [['/edit_text', '/conclusion'], ['/change_picture', '/delete_picture'],
                  ['/table'], ['/enable_notifications']]
markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)

reply_keyboard2 = [['/stop']]
markup2 = ReplyKeyboardMarkup(reply_keyboard2, one_time_keyboard=True)

con = sqlite3.connect("object_db.sqlite")
cur = con.cursor()
result = cur.execute(f'''SELECT object FROM object ''').fetchall()
object = []  # –°—é–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
homework = []  # –°—é–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
for i in result:
    object.append(i[0])
result = cur.execute(f'''SELECT homework FROM object ''').fetchall()
for i in result:
    homework.append(i[0])
con.close()


# –ó–¥–µ—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –ø—Ä–µ–¥–º–µ—Ç
def choose(update, context):
    text = ''
    for i in range(len(object)):
        text += f'{object[i]} {SMILE[i]}\n'
    update.message.reply_text(f'–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:\n{text}', reply_markup=markup2)
    return 1


# –í–≤–æ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
def object_inp(update, context):
    context.user_data['object'] = str(update.message.text)
    if context.user_data['object'] in object:
        update.message.reply_text(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–µ–¥–º–µ—Ç: {context.user_data["object"]}')
        update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–∑–º–µ–Ω–µ–Ω–∏–µ:')
        return 2
    else:
        update.message.reply_text('–¢–∞–∫–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ',
                                  reply_markup=markup
                                  )
        update.message.reply_text('–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –Ω–∞—á–∞–ª–æ')
        context.user_data.clear()
        return ConversationHandler.END


# –§–∏–∫—Å–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
def object_change(update, context):
    context.user_data['change'] = update.message.text
    con = sqlite3.connect("object_db.sqlite")
    cur = con.cursor()
    cur.execute(f"""UPDATE object 
                    SET homework = '{context.user_data['change']}'
                    WHERE object = '{context.user_data['object']}'""").fetchall()
    result = cur.execute(f'''SELECT homework FROM object 
                    WHERE object = "{context.user_data["object"]}"''').fetchall()
    for elem in result:
        update.message.reply_text(f'–£—Å–ø–µ—à–Ω–æ\n{context.user_data["object"]}: {elem[0]}',
                                  reply_markup=markup
                                  )
    con.commit()
    con.close()
    context.user_data.clear()
    return ConversationHandler.END


# –í—ã–≤–æ–¥ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –ø–æ –¥–∞–Ω–Ω–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É
def object_input(update, context):
    context.user_data['object'] = update.message.text
    if context.user_data['object'] in object:
        update.message.reply_text(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–µ–¥–º–µ—Ç: {context.user_data["object"]}')
        con = sqlite3.connect("object_db.sqlite")
        cur = con.cursor()
        result = cur.execute(f'''SELECT img FROM object 
                            WHERE object = "{context.user_data["object"]}"''').fetchall()
        text = cur.execute(f'''SELECT homework FROM object 
                            WHERE object = "{context.user_data["object"]}"''').fetchall()
        image = result[0][0]
        if image == None:
            update.message.reply_text(text[0][0], reply_markup=markup)
        else:
            update.message.reply_photo(photo=image, reply_markup=markup, caption=text[0][0])
            con.close()
    else:
        update.message.reply_text(f'–¢–∞–∫–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ',
                                  reply_markup=markup
                                  )
        update.message.reply_text('–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –Ω–∞—á–∞–ª–æ')
        context.user_data.clear()
    return ConversationHandler.END


# –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã
def start(update, context):
    con = sqlite3.connect("object_db.sqlite")
    cur = con.cursor()
    user_id = update.message.from_user.id
    users = []
    for i in cur.execute(f'''SELECT chat_id FROM notifications ''').fetchall():
        users.append(i[0])
    if user_id in users:
        reply_keyboard[3] = ['/off_notifications']
    else:
        reply_keyboard[3] = ['/enable_notifications']
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç",
        reply_markup=markup
    )
    con.close()


# –ü–æ–º–æ—â—å
def help(update, context):
    update.message.reply_text("–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –ø–æ–º–æ—â—å –ø–æ –±–æ—Ç—É.\n"
                              "–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –∏ –≤–ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏–∏ –µ–≥–æ –≤—ã–≤–æ–¥–∞.\n"
                              "–ú–æ–∂–Ω–æ —Å—á–∏—Ç–∞—Ç—å –µ–≥–æ —Å–≤–æ–µ–æ–±—Ä–∞–∑–Ω—ã–º –¥–Ω–µ–≤–Ω–∏–µ–æ–º, –∫–æ—Ç–æ—Ä—ã–º –º–æ–≥—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ü–µ–ª—ã–µ –∫–ª–∞—Å—Å—ã\n"
                              "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–∞–ø–∏—à–∏—Ç–µ /start\n"
                              "–ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å, –∏–∑–º–µ–Ω–∏—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞–ø–∏—à–∏—Ç–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ: /edit_text\n"
                              "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –∫ –¥–æ–º–∞—à–Ω–µ–º—É –∑–∞–¥–∞–Ω–∏—é –Ω–∞–ø–∏—à–∏—Ç–µ: /change_picture\n"
                              "–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–∫–∏: /delete_picture\n"
                              "–î–ª—è –≤—ã–≤–æ–¥–∞ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –ø–æ —Ç–æ–º—É –∏–ª–∏ –∏–Ω–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É: /conclusion\n"
                              "–¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ —Ç–∞–±–ª–∏—Ü—É —Å–æ –≤—Å–µ–º –¥–æ–º–∞—à–Ω–∏–º –∑–∞–¥–∞–Ω–∏–µ–º: /table\n"
                              "–î–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Ä–∞—Å—ã–ª–∫—É: /enable_notifications\n"
                              "–î–ª—è –æ—Ç–ø–∏—Å–∫–∏ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É: /off_notifications")


# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è, –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –Ω–∞—á–∞–ª–æ
def stop(update, context):
    update.message.reply_text("–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –Ω–∞—á–∞–ª–æ",
                              reply_markup=markup)
    context.user_data.clear()
    return ConversationHandler.END


# –í—ã–≤–æ–¥ —Ç–∞–±–ª–∏—Ü—ã –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
def img_input(update, context):
    con = sqlite3.connect("object_db.sqlite")
    cur = con.cursor()
    result = cur.execute(f'''SELECT object FROM object ''').fetchall()
    object = []
    homework = []
    for i in result:
        object.append(i[0])
    result = cur.execute(f'''SELECT homework FROM object ''').fetchall()
    for i in result:
        homework.append(i[0])
    df = pd.DataFrame({"–ü—Ä–µ–¥–º–µ—Ç—ã": object, "–ó–∞–¥–∞–Ω–∏—è": homework})
    df_styled = df.style.background_gradient()
    dfi.export(df_styled, "mytable.png")
    update.message.reply_photo(open('mytable.png', 'rb'))


# –í–≤–æ–¥ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
def img_inp(update, context):
    context.user_data['object'] = update.message.text
    if context.user_data['object'] in object:
        update.message.reply_text(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–µ–¥–º–µ—Ç: {context.user_data["object"]}')
        update.message.reply_text('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É')
        return 2
    else:
        update.message.reply_text(f'–¢–∞–∫–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ',
                                  reply_markup=markup
                                  )
        update.message.reply_text('–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –Ω–∞—á–∞–ª–æ')
        context.user_data.clear()
        return ConversationHandler.END


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏
def get_pic(update, context):
    if update.message.media_group_id:
        photo_id = update.message.photo[0].file_id
        print(photo_id)
    photo = update.message.photo[-1]
    update.message.reply_photo(photo=photo, caption=f'–£—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞: '
                                                    f'{context.user_data["object"]}', reply_markup=markup)
    file_info = bot.get_file(update.message.photo[len(update.message.photo) - 1].file_id)
    downloaded_file = bot.download_file(file_info.file_path)
    con = sqlite3.connect("object_db.sqlite")
    cur = con.cursor()
    cur.execute(f"""UPDATE object 
                     SET img = ? 
                    WHERE object = ?""", (downloaded_file, context.user_data['object'])).fetchall()
    con.commit()
    con.close()
    return ConversationHandler.END


# –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏
def delete_picture(update, context):
    context.user_data['object'] = str(update.message.text)
    con = sqlite3.connect("object_db.sqlite")
    cur = con.cursor()
    cur.execute(f"""UPDATE object 
                    SET img = ? 
                    WHERE object = ?""", (None, context.user_data['object'])).fetchall()
    con.commit()
    con.close()
    update.message.reply_text(f'–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞: {context.user_data["object"]}',
                              reply_markup=markup)


# –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É
def enable_notifications(update, context):
    con = sqlite3.connect("object_db.sqlite")
    cur = con.cursor()
    user_id = update.message.from_user.id
    users = []
    for i in cur.execute(f'''SELECT chat_id FROM notifications ''').fetchall():
        users.append(i[0])
    if user_id not in users:
        cur.execute(f"""INSERT INTO notifications(chat_id, name) 
                        VALUES({user_id}, '{update.message.from_user.first_name}')""").fetchall()
    reply_keyboard[3] = ['/off_notifications']
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    update.message.reply_text('–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É', reply_markup=markup)
    con.commit()
    con.close()


# –û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏
def off_notifications(update, context):
    con = sqlite3.connect("object_db.sqlite")
    cur = con.cursor()
    user_id = update.message.from_user.id
    users = []
    for i in cur.execute(f'''SELECT chat_id FROM notifications ''').fetchall():
        users.append(i[0])
    if user_id in users:
        cur.execute(f'''DELETE from notifications
                        where chat_id = {user_id}''').fetchall()
    reply_keyboard[3] = ['/enable_notifications']
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    update.message.reply_text('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏', reply_markup=markup)
    con.commit()
    con.close()


# –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ —Ä–∞—Å—Å—ã–ª–∫–µ
def send_messange():
    week = datetime.datetime.today().weekday()
    if week == 5:
        return
    con = sqlite3.connect("object_db.sqlite")
    cur = con.cursor()
    users = []
    for i in cur.execute(f'''SELECT chat_id FROM notifications ''').fetchall():
        users.append(i[0])
    inp = ''
    for i in SCHEDULE[week + 1]:
        inp += f'{i}\n'
    for i in users:
        bot.send_message(i, f'–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.\n'
                            f'–°–µ–≥–æ–¥–Ω—è –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:\n'
                            f'{inp}')
    con.close()


def main():
    updater = Updater(TOKEN)
    dp = updater.dispatcher
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("help", help))
    dp.add_handler(CommandHandler("add", input))
    dp.add_handler(CommandHandler("table", img_input))
    dp.add_handler(CommandHandler("enable_notifications", enable_notifications))
    dp.add_handler(CommandHandler("off_notifications", off_notifications))

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('edit_text', choose)],
        states={
            # –î–æ–±–∞–≤–∏–ª–∏ user_data –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞.
            1: [MessageHandler(Filters.text & ~Filters.command, object_inp, pass_user_data=True)],
            2: [MessageHandler(Filters.text & ~Filters.command, object_change, pass_user_data=True)]
        },
        fallbacks=[CommandHandler('stop', stop)]
    )

    conv_handler2 = ConversationHandler(
        entry_points=[CommandHandler('conclusion', choose)],
        states={
            # –î–æ–±–∞–≤–∏–ª–∏ user_data –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞.
            1: [MessageHandler(Filters.text & ~Filters.command, object_input, pass_user_data=True)]
        },
        fallbacks=[CommandHandler('stop', stop)]
    )

    conv_handler3 = ConversationHandler(
        entry_points=[CommandHandler('change_picture', choose)],
        states={
            # –î–æ–±–∞–≤–∏–ª–∏ user_data –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞.
            1: [MessageHandler(Filters.text & ~Filters.command, img_inp, pass_user_data=True)],
            2: [MessageHandler(Filters.photo, get_pic, pass_user_data=True)],
        },
        fallbacks=[CommandHandler('stop', stop)]
    )

    conv_handler4= ConversationHandler(
        entry_points=[CommandHandler('delete_picture', choose)],
        states={
            # –î–æ–±–∞–≤–∏–ª–∏ user_data –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞.
            1: [MessageHandler(Filters.text & ~Filters.command, delete_picture, pass_user_data=True)]
        },
        fallbacks=[CommandHandler('stop', stop)]
    )

    dp.add_handler(conv_handler)
    dp.add_handler(conv_handler2)
    dp.add_handler(conv_handler3)
    dp.add_handler(conv_handler4)
    updater.start_polling()
    schedule.every().day.at("19:00").do(send_messange)
    while True:
        schedule.run_pending()
        time.sleep(1)
    updater.idle()


# –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é main() –≤ —Å–ª—É—á–∞–µ –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞.
if __name__ == '__main__':
    main()